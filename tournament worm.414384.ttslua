-- ELO Worm by grimnebulin (aka Mark Silverman)
-- marksilverman@gmail.com
-- visit our discord if you need help: https://discord.gg/qJk8z9pSuD
playerCount = 0
ressources = { }
results = { }
startTime = os.time()
game_id = -1
gameWasSubmitted = false
tournament_token = -1

allDefaults = [[
<Defaults>
    <Panel class="Window" color="#222222ff" allowDragging="True"
        returnToOriginalPositionWhenReleased="false" outline="#404040"/>
    <Panel class="header" color="black"/>
    <Panel class="red" color="#aa2222"/>
    <Panel class="green" color="#228822"/>
    <Panel class="yellow" color="#aaaa22"/>
    <Panel class="blue" color="#2222aa"/>
    <Panel class="black" color="black"/>
    <Panel class="white" color="white"/>
    <Text fontSize="16" color="white"/>
    <Button color="blue" textColor="white" fontSize="20"/>
    <InputField onValueChanged="]]..self.guid..[[/changeValue" characterValidation="Integer" textColor="black" text="0" fontSize="20" alignment="MiddleCenter"/>
    <InputField class="red2" color="#cc4444"/>
    <InputField class="green2" color="#44aa44"/>
    <InputField class="yellow2" color="#cccc44"/>
    <InputField class="blue2" color="#4444cc"/>
</Defaults>
]]

function onLoad()
    --firstStep()
end

function firstStep()
	broadcastToAll("firstStep")
    math.randomseed(startTime)
    game_id = tostring(math.floor(100000000000000 * math.random()))
	log("time: " .. startTime .. ", game id: " .. game_id)

    self.clearContextMenu()
    self.addContextMenuItem("Open Score Screen", openScoreScreen)
    UI.setXml(allDefaults .. [[
<Panel class="Window" width="600" height="220">
<TableLayout padding="10">
<Row>
<Cell columnSpan="3"><Panel><Text>This is an official TOURNAMENT game. Enter a valid tournament token, then click continue to begin.</Text></Panel></Cell>
</Row>
<Row height="110">
<Cell height="110"><Panel height="110"><Text>tournament token:</Text></Panel></Cell>
<Cell><InputField class="green2" id="tournament_token" onValueChanged="]]..self.guid..[[/updateTournamentToken"/></Cell>
<Cell><Button id="continue" color="blue" text="CONTINUE" onClick="]]..self.guid..[[/secondStep"/></Cell>
</Row>
</TableLayout>
</Panel>
]])
end

function updateTournamentToken(player, value, element)
	tournament_token = value
end

function secondStep()
    firstPlayerMarker = getObjectFromGUID("1f5576")
    local pos = firstPlayerMarker.getPosition()
    if pos[1] > 4.78 and pos[1] < 4.79 and pos[2] > 1.57 and pos[2] < 1.58 then
        broadcastToAll('hit SETUP first!')
        return
    end

    if playerCount != 4 then
        playerCount = 0
        for _, player in ipairs(Player.getPlayers()) do
            if allGood(player) then
                local color = player.color
                results[color] = { }
                results[color]["color"] = color
                results[color]["name"] = player.steam_name
                results[color]["id"] = player.steam_id
                UI.setAttribute("agree_" .. color, "text", player.steam_name)
                playerCount = playerCount + 1
            end
        end
    end

    if playerCount != 4 then
        broadcastToAll('There are not enough players!')
        firstStep()
    else
        broadcastToAll('good luck!')
        UI.setXml(allDefaults .. [[
<Panel class="Window" width="80" height="80" rectAlignment="LowerRight" offsetXY="-10,60">
<Button id="continue" color="blue" text="Open Submit Screen" onClick="]]..self.guid..[[/openScoreScreen"/>
</Panel>
        ]])
    end
end

function fillStuff()
end

function openScoreScreen()
    ressources["Red"] = { }
    ressources["Green"] = { }
    ressources["Yellow"] = { }
    ressources["Blue"] = { }

    ressources["Red"]["vptray"] = getObjectFromGUID("e0ed4b")
    ressources["Green"]["vptray"] = getObjectFromGUID("caaba4")
    ressources["Yellow"]["vptray"] = getObjectFromGUID("99a860")
    ressources["Blue"]["vptray"] = getObjectFromGUID("121bb6")

    ressources["Red"]["épices"] = getObjectFromGUID("3074d4")
    ressources["Green"]["épices"] = getObjectFromGUID("22478f")
    ressources["Yellow"]["épices"] = getObjectFromGUID("78fb8a")
    ressources["Blue"]["épices"] = getObjectFromGUID("9cc286")

    ressources["Red"]["solari"] = getObjectFromGUID("576ccd")
    ressources["Green"]["solari"] = getObjectFromGUID("e597dc")
    ressources["Yellow"]["solari"] = getObjectFromGUID("c5c4ef")
    ressources["Blue"]["solari"] = getObjectFromGUID("fa5236")

    ressources["Red"]["eau"] = getObjectFromGUID("692c4d")
    ressources["Green"]["eau"] = getObjectFromGUID("fa9522")
    ressources["Yellow"]["eau"] = getObjectFromGUID("f217d0")
    ressources["Blue"]["eau"] = getObjectFromGUID("0afaeb")

    ressources["Red"]["leader"] = getObjectFromGUID("66cdbb")
    ressources["Green"]["leader"] = getObjectFromGUID("cf1486")
    ressources["Yellow"]["leader"] = getObjectFromGUID("a677e0")
    ressources["Blue"]["leader"] = getObjectFromGUID("681774")

    UI.setXml(allDefaults .. [[
<Panel id="Window" class="Window" width="950" height="400" color="#222222ff" allowDragging="True"
    returnToOriginalPositionWhenReleased="false" outline="#404040">
    <TableLayout>
    <Row>
    <Cell><Panel color="gray"></Panel></Cell>
    <Cell columnSpan="5"><Panel color="gray"><Text>NOTE: This tool doesn't know about Chaumurky or other tie-breakers. Manually adjust the rankings (and other values) and TAKE A SCREENSHOT before submitting.</Text></Panel></Cell>
    <Cell><Panel color="gray"></Panel></Cell>
    </Row>
        <Row>
            <Cell><Panel><Text>Tournament Token:</Text></Panel></Cell>
            <Cell><InputField id="tournament_token" onValueChanged="]]..self.guid..[[/updateTournamentToken"/></Cell>
            <Cell><Panel color="white"/></Cell>
            <Cell><Panel color="white"/></Cell>
            <Cell><Panel color="white"/></Cell>
            <Cell><Panel color="white"/></Cell>
            <Cell><Panel color="white"/></Cell>
        </Row>
        <Row>
            <Cell><Panel class="header"><Text>PLAYER</Text></Panel></Cell>
            <Cell><Panel class="header"><Text>LEADER</Text></Panel></Cell>
            <Cell><Panel class="header"><Text>RANK</Text></Panel></Cell>
            <Cell><Panel class="header"><Text>VPs</Text></Panel></Cell>
            <Cell><Panel class="header"><Text>SPICE</Text></Panel></Cell>
            <Cell><Panel class="header"><Text>SOLARI</Text></Panel></Cell>
            <Cell><Panel class="header"><Text>WATER</Text></Panel></Cell>
        </Row>
        <Row>
            <Cell><Panel class="red"><Text id="name_red"></Text></Panel></Cell>
            <Cell><Panel class="red"><Text id="leader_red"></Text></Panel></Cell>
            <Cell><InputField class="red2" id="rank_red"/></Cell>
            <Cell><InputField class="red2" id="points_red"/></Cell>
            <Cell><InputField class="red2" id="spice_red"/></Cell>
            <Cell><InputField class="red2" id="solari_red"/></Cell>
            <Cell><InputField class="red2" id="water_red"/></Cell>
        </Row>
        <Row>
            <Cell><Panel class="green"><Text id="name_green"></Text></Panel></Cell>
            <Cell><Panel class="green"><Text id="leader_green"></Text></Panel></Cell>
            <Cell><InputField class="green2" id="rank_green"/></Cell>
            <Cell><InputField class="green2" id="points_green"/></Cell>
            <Cell><InputField class="green2" id="spice_green"/></Cell>
            <Cell><InputField class="green2" id="solari_green"/></Cell>
            <Cell><InputField class="green2" id="water_green"/></Cell>
        </Row>
        <Row>
            <Cell><Panel class="yellow"><Text id="name_yellow"></Text></Panel></Cell>
            <Cell><Panel class="yellow"><Text id="leader_yellow"></Text></Panel></Cell>
            <Cell><InputField class="yellow2" id="rank_yellow"/></Cell>
            <Cell><InputField class="yellow2" id="points_yellow"/></Cell>
            <Cell><InputField class="yellow2" id="spice_yellow"/></Cell>
            <Cell><InputField class="yellow2" id="solari_yellow"/></Cell>
            <Cell><InputField class="yellow2" id="water_yellow"/></Cell>
        </Row>
        <Row>
            <Cell><Panel class="blue"><Text id="name_blue"></Text></Panel></Cell>
            <Cell><Panel class="blue"><Text id="leader_blue"></Text></Panel></Cell>
            <Cell><InputField class="blue2" id="rank_blue"/></Cell>
            <Cell><InputField class="blue2" id="points_blue"/></Cell>
            <Cell><InputField class="blue2" id="spice_blue"/></Cell>
            <Cell><InputField class="blue2" id="solari_blue"/></Cell>
            <Cell><InputField class="blue2" id="water_blue"/></Cell>
        </Row>
        <Row>
            <Cell><Button id="close" text="Close" onClick="]]..self.guid..[[/secondStep"/></Cell>
            <Cell><Panel color="black"/></Cell>
            <Cell><Panel color="black"/></Cell>
            <Cell><Panel color="black"/></Cell>
            <Cell><Panel color="black"/></Cell>
            <Cell><Button id="fetch" text="Refresh Results" onClick="]]..self.guid..[[/refreshResults"/></Cell>
            <Cell><Button id="submit" text="Submit!" onClick="]]..self.guid..[[/sendForm"/></Cell>
        </Row>
    </TableLayout>
</Panel>
]])
    Wait.frames(refreshResults, 2)
end

function lookForProblems()
    if gameWasSubmitted then return end

    local rankList = { UI.getAttribute("rank_red", "text"),
                       UI.getAttribute("rank_green", "text"),
                       UI.getAttribute("rank_yellow", "text"),
                       UI.getAttribute("rank_blue", "text") }
    for i = 1, 3 do
        for j = i + 1, 4 do
            if rankList[i] == rankList[j] then
                broadcastToAll('ERROR: Two or more players are tied in rank. Resolve this before submitting.')
                UI.setAttribute("submit", "interactable", "false")
                UI.setAttribute("submit", "color", "red")
                UI.setAttribute("submit", "textColor", "white")
                UI.setAttribute("submit", "text", "Resolve tie first!")
                return
            end
        end
    end

    vpRed = tonumber(UI.getAttribute("points_red", "text"))
    vpGreen = tonumber(UI.getAttribute("points_green", "text"))
    vpYellow = tonumber(UI.getAttribute("points_yellow", "text"))
    vpBlue = tonumber(UI.getAttribute("points_blue", "text"))
    if vpRed < 10 and vpGreen < 10 and vpYellow < 10 and vpBlue < 10 then
        UI.setAttribute("submit", "interactable", "false")
        UI.setAttribute("submit", "color", "red")
        UI.setAttribute("submit", "textColor", "white")
        UI.setAttribute("submit", "text", "Finish game first!")
        return
    end

    UI.setAttribute("submit", "interactable", "true")
    UI.setAttribute("submit", "color", "blue")
    UI.setAttribute("submit", "textColor", "white")
    UI.setAttribute("submit", "text", "Submit!")
end

function changeValue(player, value, element)
    UI.setAttribute(element, "text", value)
    Wait.frames(lookForProblems, 2)
end

function changeToggle(player, value, element)
    UI.setAttribute(element, "isOn", value)
    Wait.frames(lookForProblems, 2)
end

function disableSubmitButton()
    UI.setAttribute("submit", "interactable", "false")
    UI.setAttribute("submit", "color", "purple")
    UI.setAttribute("submit", "textColor", "yellow")
    UI.setAttribute("submit", "text", "SUCCESS!")
end

function formCallback(request)
    if request.is_error then
        broadcastToAll('there was an error!')
        broadcastToAll(request.text)
        gameWasSubmitted = false
    else
        broadcastToAll('form was submitted successfully')
        disableSubmitButton()
    end
end

function sendForm(submitter)
    if gameWasSubmitted then
        broadcastToAll('results were already submitted')
        disableSubmitButton()
        return
    end

    gameWasSubmitted = true

    local conflictCardZone = getObjectFromGUID('07e239')
    local conflictCards = conflictCardZone.getObjects()[1]
    local round = 10
    if conflictCards ~= nil then
        if conflictCards.tag == 'Deck' then
            local cards = conflictCards.getObjects()
            round = 10 - #cards
        elseif conflictCards.tag == 'Card' then
            round = 9
        end
    end
    local infoTable = {
        ["entry.2126893034"] = "1", --is_ranked
        ["entry.447092407"] = game_id, --game_id
        ["entry.40772176"] = "2", -- carryall_version. Increment this value by 1 each release.
        ["entry.1195859029"] = submitter.steam_id, --submitter_steam_id
        ["entry.980559040"] = submitter.steam_name, --submitter_steam_name
        ["entry.779373663"] = startTime, --game_start_timestamp
        ["entry.234195300"] = round, --n_rounds

        ["entry.82402215"] = results["Red"]["id"], --p1_steam_id
        ["entry.1635429235"] = UI.getAttribute("name_red", "text"), --p1_steam_name
        ["entry.419710564"] = UI.getAttribute("rank_red", "text"), --p1_placement
        ["entry.1878523358"] = UI.getAttribute("points_red", "text"), --p1_total_vps
        ["entry.1073272736"] = "", --p1_vps_list
        ["entry.178708796"] = UI.getAttribute("spice_red", "text"), --p1_spice
        ["entry.312713987"] = UI.getAttribute("solari_red", "text"), --p1_solari
        ["entry.377801515"] = UI.getAttribute("water_red", "text"), --p1_water
        ["entry.1566289571"] = "", --p1_chamurky
        ["entry.220375463"] = "", --p1_startpos
        ["entry.565786681"] = UI.getAttribute("leader_red", "text"), --p1_leader

        ["entry.926384740"] = results["Green"]["id"], --p2_steam_id
        ["entry.8189124"] = UI.getAttribute("name_green", "text"), --p2_steam_name
        ["entry.829300525"] = UI.getAttribute("rank_green", "text"), --p2_placement
        ["entry.1498362639"] = UI.getAttribute("points_green", "text"), --p2_total_vps
        ["entry.1338086196"] = "", --p2_vps_list
        ["entry.2112800604"] = UI.getAttribute("spice_green", "text"), --p2_spice
        ["entry.97230832"] = UI.getAttribute("solari_green", "text"), --p2_solari
        ["entry.1615516743"] = UI.getAttribute("water_green", "text"), --p2_water
        ["entry.431493524"] = "", --p2_chamurky
        ["entry.516704953"] = "", --p2_startpos
        ["entry.126177821"] = UI.getAttribute("leader_green", "text"), --p2_leader

        ["entry.1056344986"] = results["Yellow"]["id"], --p3_steam_id
        ["entry.1000335964"] = UI.getAttribute("name_yellow", "text"), --p3_steam_name
        ["entry.1815125303"] = UI.getAttribute("rank_yellow", "text"), --p3_placement
        ["entry.1006025268"] = UI.getAttribute("points_yellow", "text"), --p3_total_vps
        ["entry.405019323"] = "", --p3_vps_list
        ["entry.1485294161"] = UI.getAttribute("spice_yellow", "text"), --p3_spice
        ["entry.1960273034"] = UI.getAttribute("solari_yellow", "text"), --p3_solari
        ["entry.2103268491"] = UI.getAttribute("water_yellow", "text"), --p3_water
        ["entry.1546563705"] = "", --p3_chamurky
        ["entry.1730389595"] = "", --p3_startpos
        ["entry.555758857"] = UI.getAttribute("leader_yellow", "text"), --p3_leader

        ["entry.724137382"] = results["Blue"]["id"], --p4_steam_id
        ["entry.79132597"] = UI.getAttribute("name_blue", "text"), --p4_steam_name
        ["entry.1095237101"] = UI.getAttribute("rank_blue", "text"), --p4_placement
        ["entry.1786102321"] = UI.getAttribute("points_blue", "text"), --p4_total_vps
        ["entry.654442789"] = "", --p4_vps_list
        ["entry.1200193803"] = UI.getAttribute("spice_blue", "text"), --p4_spice
        ["entry.848733094"] = UI.getAttribute("solari_blue", "text"), --p4_solari
        ["entry.767203598"] = UI.getAttribute("water_blue", "text"), --p4_water
        ["entry.2048085041"] = "", --p4_chamurky
        ["entry.1751147952"] = "", --p4_startpos
        ["entry.850152509"] = UI.getAttribute("leader_blue", "text"), --p4_leader

        ["entry.879491944"] = 0 --immortality
    }
    WebRequest.post("https://docs.google.com/forms/u/0/d/e/1FAIpQLScGit6kyKI_5It9aZAM82KNCBQ4RC0dQWxNA4DDwgj3z05zKA/formResponse",
        infoTable, formCallback)
end

function allGood(player)
    if not player.seated then
        return false
    end

    local color = player.color
    if color == "Red" or color == "Green" or color == "Yellow" or color == "Blue" then
        return true
    else
        return false
    end
end

function refreshResults()
    if gameWasSubmitted then disableSubmitButton() end

    local playerCount = 0
    if results == nil then results = { } end
    for _, player in pairs(results) do
        local color = player["color"]
        local victoryPoints = ressources[color]["vptray"].call("getScore") - 1
        results[color]["rank"] = -1
        results[color]["points"] = victoryPoints
        results[color]["leader"] = ressources[color]["leader"].getObjects()[1].getName()
        results[color]["spice"] = ressources[color]["épices"].call("collectVal")
        results[color]["solari"] = ressources[color]["solari"].call("collectVal")
        results[color]["water"] = ressources[color]["eau"].call("collectVal")
        playerCount = playerCount + 1
    end

    if playerCount < 4 then
        if playerCount > 0 then
            broadcastToAll("not enough players!")
        end
        return
    end

    -- tables can't be sorted so we copy the values into an array
    local sortedResults = { }
    for _, value in pairs(results) do
        table.insert(sortedResults, value)
    end
    table.sort(sortedResults, function (left, right) return left["points"] > right["points"] end)

    -- now we can extract the rankings
    for rank, value in pairs(sortedResults) do
        results[value["color"]]["rank"] = rank
    end

    UI.setAttribute("tournament_token", "text", tournament_token)

    UI.setAttribute("points_red", "text", results["Red"]["points"])
    UI.setAttribute("name_red", "text", results["Red"]["name"])
    UI.setAttribute("id_red", "text", results["Red"]["id"])
    UI.setAttribute("rank_red", "text", results["Red"]["rank"])
    UI.setAttribute("leader_red", "text", results["Red"]["leader"])
    UI.setAttribute("spice_red", "text", results["Red"]["spice"])
    UI.setAttribute("solari_red", "text", results["Red"]["solari"])
    UI.setAttribute("water_red", "text", results["Red"]["water"])

    UI.setAttribute("points_green", "text", results["Green"]["points"])
    UI.setAttribute("name_green", "text", results["Green"]["name"])
    UI.setAttribute("id_green", "text", results["Green"]["id"])
    UI.setAttribute("rank_green", "text", results["Green"]["rank"])
    UI.setAttribute("leader_green", "text", results["Green"]["leader"])
    UI.setAttribute("spice_green", "text", results["Green"]["spice"])
    UI.setAttribute("solari_green", "text", results["Green"]["solari"])
    UI.setAttribute("water_green", "text", results["Green"]["water"])

    UI.setAttribute("points_yellow", "text", results["Yellow"]["points"])
    UI.setAttribute("name_yellow", "text", results["Yellow"]["name"])
    UI.setAttribute("id_yellow", "text", results["Yellow"]["id"])
    UI.setAttribute("rank_yellow", "text", results["Yellow"]["rank"])
    UI.setAttribute("leader_yellow", "text", results["Yellow"]["leader"])
    UI.setAttribute("spice_yellow", "text", results["Yellow"]["spice"])
    UI.setAttribute("solari_yellow", "text", results["Yellow"]["solari"])
    UI.setAttribute("water_yellow", "text", results["Yellow"]["water"])

    UI.setAttribute("points_blue", "text", results["Blue"]["points"])
    UI.setAttribute("name_blue", "text", results["Blue"]["name"])
    UI.setAttribute("leader_blue", "text", results["Blue"]["leader"])
    UI.setAttribute("id_blue", "text", results["Blue"]["id"])
    UI.setAttribute("rank_blue", "text", results["Blue"]["rank"])
    UI.setAttribute("spice_blue", "text", results["Blue"]["spice"])
    UI.setAttribute("solari_blue", "text", results["Blue"]["solari"])
    UI.setAttribute("water_blue", "text", results["Blue"]["water"])
    Wait.frames(lookForProblems, 2)
end
